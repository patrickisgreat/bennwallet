name: Deploy to Development

on:
  workflow_dispatch:
  push:
    branches: [dev]

permissions:
  issues: write
  pull-requests: write

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'
  FLY_DEV_APP_NAME: 'bennwallet'
  VOLUME_NAME: 'bennwallet_data'

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Test database package
        run: |
          cd backend
          go test -v -race ./database

      - name: Test handlers package
        run: |
          cd backend
          go test -v -race ./handlers

      - name: Test other packages
        run: |
          cd backend
          go test -v -race ./... -coverpkg=./... -coverprofile=coverage.txt -covermode=atomic

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: NPM Cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          npm install
          npm ci --prefer-offline --no-audit

      - name: Check test environment
        run: |
          ls -la src/test/
          node --version
          npm --version
          npx vitest --version

      - name: Run tests with coverage
        timeout-minutes: 3
        run: npm run test:ci
        env:
          DEBUG: 'vitest:*'
          VITEST_MAX_THREADS: 1

      - name: Build frontend
        env:
          VITE_API_URL: 'https://${{ env.FLY_DEV_APP_NAME }}.fly.dev'
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 1

  deploy-dev:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Debug - Display app and volume names
        run: |
          echo "App Name: ${{ env.FLY_DEV_APP_NAME }}"
          echo "Volume Name: ${{ env.VOLUME_NAME }}"

      - name: Create development fly.toml
        run: |
          cat > fly.toml << EOF
          app = "${{ env.FLY_DEV_APP_NAME }}"
          primary_region = "sjc"

          [build]
            dockerfile = "Dockerfile"

          [build.args]
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [env]
            PORT = "8080"
            NODE_ENV = "development"
            ENVIRONMENT = "development"
            APP_ENV = "development"
            RESET_DB = "true"
            DATABASE_URL = "postgres://postgres:${{ secrets.DB_PASSWORD }}@${{ env.FLY_DEV_APP_NAME }}-db.internal:5432/bennwallet"
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [http_service]
            internal_port = 8080
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 0
            processes = ["app"]

          [[vm]]
            cpu_kind = "shared"
            cpus = 1
            memory_mb = 1024
          EOF

      - name: Check if volume exists and create if needed
        run: |
          if ! flyctl volumes list --app "${{ env.FLY_DEV_APP_NAME }}" | grep -q "${{ env.VOLUME_NAME }}"; then
            echo "Creating volume ${{ env.VOLUME_NAME }}..."
            flyctl volumes create "${{ env.VOLUME_NAME }}" --app "${{ env.FLY_DEV_APP_NAME }}" --region sjc --size 1 --yes
          else
            echo "Volume ${{ env.VOLUME_NAME }} already exists"
          fi

      - name: Deploy to Fly.io Development
        run: |
          echo "Deploying to app: ${{ env.FLY_DEV_APP_NAME }}"
          flyctl deploy --remote-only --app "${{ env.FLY_DEV_APP_NAME }}"
        env:
          NODE_ENV: development
          ENVIRONMENT: development
          APP_ENV: development
          RESET_DB: 'true'
