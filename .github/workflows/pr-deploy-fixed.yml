name: Deploy PR Environment

on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [main]

permissions:
  issues: write
  pull-requests: write

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate PR app name and volume name
        id: app-name
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          APP_NAME="bennwallet-pr-${PR_NUMBER}"
          VOLUME_NAME="bennwalletpr${PR_NUMBER}_data"
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "VOLUME_NAME=${VOLUME_NAME}" >> $GITHUB_ENV
          echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        env:
          VITE_API_URL: 'https://${{ env.APP_NAME }}.fly.dev'
        run: npm run build

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set Firebase credentials in Fly.io
        run: |
          echo "Setting Firebase credentials in Fly.io secrets for PR environment..."
          cat > /tmp/firebase-credentials.json << 'EOT'
          ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          EOT
          flyctl secrets set FIREBASE_SERVICE_ACCOUNT_JSON="$(cat /tmp/firebase-credentials.json)" -a "${{ env.APP_NAME }}"
          rm /tmp/firebase-credentials.json
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create fly.toml for PR
        run: |
          cat > fly.toml << EOF
          app = "${{ env.APP_NAME }}"
          primary_region = "sjc"

          [build]
            dockerfile = "Dockerfile"

          [build.args]
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [env]
            PORT = "8080"
            NODE_ENV = "production"
            PR_DEPLOYMENT = "true"
            PR_NUMBER = "${{ github.event.pull_request.number }}"
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [http_service]
            internal_port = 8080
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 0
            processes = ["app"]

          [[vm]]
            cpu_kind = "shared"
            cpus = 1
            memory_mb = 1024
            
          [[mounts]]
            source = "${{ env.VOLUME_NAME }}"
            destination = "/data"
            
            [mounts.options]
              size = "1"
          EOF

      - name: Debug - Display app name and volume name
        run: |
          echo "APP_NAME: ${{ env.APP_NAME }}"
          echo "VOLUME_NAME: ${{ env.VOLUME_NAME }}"
          cat fly.toml | grep -E 'app|source'

      - name: Check if app exists
        id: check-app
        continue-on-error: true
        run: |
          flyctl apps list | grep "${{ env.APP_NAME }}" || echo "App does not exist yet"
          if flyctl apps list | grep -q "${{ env.APP_NAME }}"; then
            echo "APP_EXISTS=true" >> $GITHUB_ENV
          else
            echo "APP_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create app if it doesn't exist
        if: env.APP_EXISTS == 'false'
        run: |
          flyctl apps create "${{ env.APP_NAME }}" --org personal

      - name: Check if volume exists and create if needed
        run: |
          if ! flyctl volumes list --app "${{ env.APP_NAME }}" | grep -q "${{ env.VOLUME_NAME }}"; then
            echo "Creating volume ${{ env.VOLUME_NAME }}..."
            flyctl volumes create "${{ env.VOLUME_NAME }}" --app "${{ env.APP_NAME }}" --region sjc --size 1 --yes
          else
            echo "Volume ${{ env.VOLUME_NAME }} already exists"
          fi

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only --app "${{ env.APP_NAME }}"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ PR environment deployed to https://${{ env.APP_NAME }}.fly.dev

            This environment will be automatically destroyed when the PR is closed.`
            })
