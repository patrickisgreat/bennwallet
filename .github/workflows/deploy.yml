name: Test, Build and Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20'
  FLY_PROD_APP_NAME: 'bennwallet-prod'

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd backend
          go mod download

      - name: Test database package
        run: |
          cd backend
          go test -v -race ./database

      - name: Test handlers package
        run: |
          cd backend
          go test -v -race ./handlers

      - name: Test other packages
        run: |
          cd backend
          go test -v -race ./... -coverpkg=./... -coverprofile=coverage.txt -covermode=atomic

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.txt
          flags: backend
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: NPM Cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
          npm install
          npm ci --prefer-offline --no-audit

      - name: Check test environment
        run: |
          ls -la src/test/
          node --version
          npm --version
          npx vitest --version

      - name: Run tests with coverage
        timeout-minutes: 3
        run: npm run test:ci
        env:
          DEBUG: 'vitest:*'
          VITEST_MAX_THREADS: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: frontend
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build frontend
        env:
          VITE_API_URL: ${{ github.ref == 'refs/heads/main' && format('https://{0}.fly.dev', env.FLY_PROD_APP_NAME) || 'http://localhost:8080' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/
          retention-days: 1

  deploy-production:
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: dist/

      - name: Set up Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Check if prod app exists
        id: check-app
        continue-on-error: true
        run: |
          if flyctl apps list | grep -q "${{ env.FLY_PROD_APP_NAME }}"; then
            echo "APP_EXISTS=true" >> $GITHUB_ENV
          else
            echo "APP_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create prod app if it doesn't exist
        if: env.APP_EXISTS == 'false'
        run: |
          flyctl apps create "${{ env.FLY_PROD_APP_NAME }}" --org personal

      - name: Check and create required volumes
        run: |
          echo "Checking for required volumes..."

          # Create 2 volumes in the sjc region as required
          echo "Creating volume bennwallet_prod_data in sjc region..."
          flyctl volume create bennwallet_prod_data -r sjc -n 2 --size 1 --app ${{ env.FLY_PROD_APP_NAME }} || true

          # List current volumes to verify
          echo "Current volumes:"
          flyctl volumes list --app ${{ env.FLY_PROD_APP_NAME }}

      - name: Create production fly.toml
        run: |
          cat > fly.toml << EOF
          app = "${{ env.FLY_PROD_APP_NAME }}"
          primary_region = "sjc"

          [build]
            dockerfile = "Dockerfile"

          [build.args]
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [env]
            PORT = "8080"
            NODE_ENV = "production"
            ENVIRONMENT = "production"
            YNAB_API_TOKEN = "${{ secrets.YNAB_API_TOKEN }}"
            YNAB_BUDGET_ID = "${{ secrets.YNAB_BUDGET_ID }}"
            YNAB_ACCOUNT_ID = "${{ secrets.YNAB_ACCOUNT_ID }}"

          [http_service]
            internal_port = 8080
            force_https = true
            auto_stop_machines = true
            auto_start_machines = true
            min_machines_running = 1
            processes = ["app"]

          [[vm]]
            cpu_kind = "shared"
            cpus = 1
            memory_mb = 1024
            
          [[mounts]]
            source = "bennwallet_prod_data"
            destination = "/data"
            
            [mounts.options]
              size = "1"
          EOF

      - name: Set Firebase credentials in Fly.io
        run: |
          echo "Setting Firebase credentials in Fly.io secrets..."
          
          # Write the credentials to a file with proper quoting
          # Using variable substitution with single quotes to preserve JSON structure
          cat > /tmp/firebase-credentials.json << 'EOT'
          ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          EOT
          
          # Set the secret from the file
          flyctl secrets set FIREBASE_SERVICE_ACCOUNT_JSON="$(cat /tmp/firebase-credentials.json)" -a ${{ env.FLY_PROD_APP_NAME }}
          
          # Clean up
          rm /tmp/firebase-credentials.json
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io Production
        run: flyctl deploy --remote-only --app ${{ env.FLY_PROD_APP_NAME }}
        env:
          NODE_ENV: production
